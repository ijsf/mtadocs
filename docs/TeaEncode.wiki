
{{Server_client function}}

{{New feature/item|3.0135|1.3.5|6056|
This functions performs the [https://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm Tiny Encryption Algorithm] on the given string and returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted string.
}}

==Syntax==
<syntaxhighlight lang="lua">string teaEncode ( string text , string key )</syntaxhighlight>

===Required Arguments===
*'''text:''' The string you want to encrypt. (See second example if you want to encode binary data)
*'''key:''' The key that should be used for encryption (Only first 16 characters are used)

===Returns===
Returns the [https://en.wikipedia.org/wiki/Base64 base64] representation of the encrypted string if the encryption process was successfully completed, ''false'' otherwise.

==Example==
<section name="Client" class="client" show="true">
This example creates a /teaencrypt command, which performs the TEA on a given string with the specified key, if any.
<code>
[lua]
function encryptString( cmd, theString, theKey )
    if ( theString ) then
        if ( not theKey ) then
            theKey = string.rep( string.char( math.random( string.byte( "a" ), string.byte( "Z" ) ) ), 10 ) -- Generate a random key of 10 characters if no key was passed in as an argument
        end
        local encodedString = teaEncode( theString, theKey ) -- Encode the string with the key
        outputChatBox( "The encoded string is: " .. tostring( encodedString ) .. " (used key: " .. theKey .. ")" )
    else
        outputChatBox( "Syntax: /" .. cmd .. " [string] <[key]>" )
    end
end
addCommandHandler( "teaencrypt", encryptString )
</syntaxhighlight>

This shows how to use teaEncode/teaDecode with binary data:
<code>
function teaEncodeBinary( data, key )
    return teaEncode( base64Encode( data ), key )
end
function teaDecodeBinary( data, key )
    return base64Decode( teaDecode( data, key ) )
end
</section>

==See Also==
{{Utility functions}}