 
{{Server client function}}
{{New feature/item|3.0120|1.2||
Available client side in 1.2 and onwards.
}}

This function converts a '''single''' value (preferably a Lua table) into a [[/JSON.md|JSON]] encoded string. You can use this to store the data and then load it again using [[/fromJSON.md|fromJSON]].

==Syntax== 
<!-- NOTE: don't use 'special' names for variable names, e.g. you shouldn't be writing things like 'player player, vehicle vehicle', instead write something like 'player thePlayer, vehicle vehicleToGetInto'. This is less confusing and prevents the syntax highlighting being odd -->
<syntaxhighlight lang="lua">
string toJSON ( var value, [ bool compact = false ][, string prettyType = "none" ] )
</syntaxhighlight>

===Required Arguments=== 
*'''var:''' An argument of any type. Arguments that are elements will be stored as element IDs that are liable to change between sessions. As such, do not save elements across sessions as you will get unpredictable results.

===Optional Arguments=== 
{{OptionalArg}} 
{{New feature/item|3.0150|1.5||
*'''compact:''' a [[/boolean.md|boolean]] representing whether the string will contain whitespaces. To remove whitespaces from JSON string, use ''true''. String will contain whitespaces per default.
}}
{{New feature/item|3.0160|1.6|8046|
*'''prettyType:''' a type [[/string.md|string]] from below:
** none
** spaces
** tabs
}}

===Returns===
Returns a JSON formatted string.

==Example== 
This example shows how you can encode an array. The string json should equal ''"[ { "1": "dogs", "mouse": "food", "cat": "hungry", "birds": 4 } ]" after executed.
<syntaxhighlight lang="lua">
local json = toJSON ( { "dogs", cat = "hungry", mouse = "food", birds = 4 } )
</syntaxhighlight>

==Requirements==
{{Requirements|1.0|1.1.1-9.03316|}}

==See Also==
{{Server_functions}}