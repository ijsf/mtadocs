{{Needs Checking|Confirm steps work.}}

== Installing and Running MTASA server on Linux ==
{{Note|This article is only for developers who changed the server code, if you are looking for the precompiled server (for normal server owners). Go to: [http://linux.mtasa.com/ linux.mtasa.com] and see [[/Installing and Running MTASA Server on GNU_Linux.md|Installing and Running MTASA Server on GNU_Linux]]}}

<!--
== Compiling on a 64 bit Linux ==
Additional steps for compiling a MTA server on 64 bit Linux:
===Install 32 bit libs for your 64 bit distro===
For 64 bit Debian, this is achieved with:

 apt-get install ia32-libs

===64 bit Troubleshooting===
* If you get a problem with such as "libreadline.so.5: cannot open shared object file: No such file or directory.", it can be solved on 64 bit Debian Squeeze  by doing this:

 apt-get install lib32readline5

* If you get a problem with such as "libncursesw.so.5 cannot open shared object file: No such file or directory", it can be solved on 64 bit Debian Squeeze by doing this:

 apt-get install lib32ncursesw5

* Further 64 bit solutions can be found [http://forum.mtasa.com/viewtopic.php?f=106&t=35328#p367282 on the forums]

* If you are using Cent OS and you get something like /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.9' not found (required by xmll.so) this can be resolved by doing downloading the archive [[/http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/9/Fedora/i386/os/Packages/libstdc++-4.3.0-8.i386.rpm here.md|http://archives.fedoraproject.org/pub/archive/fedora/linux/releases/9/Fedora/i386/os/Packages/libstdc++-4.3.0-8.i386.rpm here]] and unpacking it with the following command:

 rpm2cpio libstdc++-4.3.0-8.i386.rpm | cpio -i --make-directories
-->
== Preparing your system ==

In order to build the Multi Theft Auto dedicated server, you will have to set up your system with the correct libraries and tools. How these are installed depends on your distribution.

Our network module (net.dll or net.so) is distributed as a precompiled binary library. The file for GNU/Linux can be found inside the lastest Linux nightly from [http://nightly.mtasa.com/ here]. Use the net.so from {{Current Version|master}} if you are compiling from the trunk, or the net.so from {{Current Version|full}} if you are compiling the {{Current Version|full}} branch. Be sure the read the top of ''MTA10_Server/version.h'' as it contains directions on how to compile the different build types.

=== Debian Linux ===

Includes derivative distributions such as Ubuntu.

You will need the necessary build tools, headers and libraries, which are distributed through the following Debian packages (e.g. Debian Lenny):

* '''build-essential:''' contains the necessary tools, headers and libraries to build applications
* '''automake:''' contains the automake tools
* '''libtool:''' contains the libtool software required to build libraries
<!--
* '''libcurl3-dev:''' contains the cURL library (version 3 without SSL support)
* '''libpcre3-dev:''' contains the PCRE library (version 3)
* '''libsqlite3-dev:''' contains the SQLite library (version 3)
-->
* '''libreadline5-dev:''' contains the readline library (version 5)
* '''libncurses5-dev:''' contains software for controlling writing to the console screen
* '''libncursesw5-dev:''' contains support for wide characters
<!--
* '''libsparsehash-dev:''' contains support for Google's hash-map '''(So you don't have to compile sparehash!)'''
-->
* '''libmysqlclient-dev:''' contains the MySQL library
* '''git:''' contains the git client used to check out our code repository
To install these packages through apt, use the apt-get install <package list> command as in the following example (execute as root):

 apt-get install build-essential automake libtool
 apt-get install libreadline5-dev libncurses5-dev libncursesw5-dev
 apt-get install libmysqlclient-dev git 

=== Gentoo Linux ===
You will need the necessary build tools, headers and libraries. Because Gentoo’s portage system is designed to compile any packages on your own system, the necessary build tools will have already been installed. This only leaves you to install the necessary libraries:

<!--
* '''sqlite:''' contains the SQLite library
* '''curl:''' contains the cURL library; to compile with SSL support, apply the net-misc/curl ssl USE flag
-->
* '''git:''' contains the git client used to check out our code repository
To compile and install these packages through emerge, use the emerge -v <package list> command. The -v option shows additional * * information and can be omitted. (If you want to use any USE flags, prepend emerge with USE="use flags here". You can also use the -pv option to verify that you’re using the correct flags.) Refer to the [http://www.gentoo.org/doc/en/handbook/handbook-x86.xml?part=2&chap=1 Gentoo Handbook] or manual for more information on emerge.

Example:

 emerge -v git sqlite
 USE=“net-misc/curl ssl” emerge -v curl

=== Fedora ===


You will need these packages to be able to successfully compile a MTA server on Fedora: 
* '''glibc-devel:'''
<!--
* '''curl-devel:''' contains the cURL library
* '''pcre-devel:''' contains the PCRE library
* '''sqlite3-devel:''' contains the SQLite library
-->
* '''readline-devel:''' contains the readline library
<!--
* '''lua-devel:''' contains the Lua libraries
-->
* '''git:''' contains the git client to check out the source code
To install these packages through yum, use the yum install <package list> command as in the following example (execute as root):

 yum install glibc-devel readline-devel git

== General instructions for {{Current Version|master}} ==

'''Downloading the source.'''

First you need to download the source. Either clone as show below or [https://github.com/multitheftauto/mtasa-blue/archive/master.zip download a zip snapshot]

 git clone <nowiki>https</nowiki>://github.com/multitheftauto/mtasa-blue.git mtasa-blue
 cd mtasa-blue

Then compile it thus:

 ./mta-build.sh

Then copy the built binaries and configuration files into MTA10_Server/output by running this command:

 ./mta-install.sh

Get the net.so like this:

 wget <nowiki>http</nowiki>://nightly.mtasa.com/?multitheftauto_linux-{{Current Version|master}}-unstable-latest -O multitheftauto_linux-{{Current Version|master}}-latest.tar.gz
 tar -xzf multitheftauto_linux-{{Current Version|master}}-latest.tar.gz --transform 's:[^/]*:latest_nightly:'
 mv latest_nightly/net.so MTA10_Server/output/
 rm -rf latest_nightly multitheftauto_linux-{{Current Version|master}}-latest.tar.gz

Get resources:

 wget <nowiki>https</nowiki>://github.com/multitheftauto/mtasa-resources/archive/master.tar.gz
 tar -xf master.tar.gz
 mv mtasa-resources-master MTA10_Server/output/mods/deathmatch/resources

And the server should be ready in MTA10_Server/output

=== '''Troubleshooting''' ===

Any errors during the compilation of json-c can be solved by calling autoreconf -fi from the json-c directory.

If you’re getting any unexpected errors while compiling, please check our [http://bugs.mtasa.com/ Bug tracker] or our [irc://irc.multitheftauto.com/ IRC channel]

[[/ru:Building MTASA Server on GNU Linux.md|ru:Building MTASA Server on GNU Linux]]
[[/Category: Development.md|Category: Development]]